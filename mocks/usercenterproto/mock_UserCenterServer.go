// Code generated by mockery v2.38.0. DO NOT EDIT.

package mockusercenterproto

import (
	context "context"

	usercenterproto "github.com/liangjunmo/goproject/api/usercenterproto"
	mock "github.com/stretchr/testify/mock"
)

// MockUserCenterServer is an autogenerated mock type for the UserCenterServer type
type MockUserCenterServer struct {
	mock.Mock
}

type MockUserCenterServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserCenterServer) EXPECT() *MockUserCenterServer_Expecter {
	return &MockUserCenterServer_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *MockUserCenterServer) CreateUser(_a0 context.Context, _a1 *usercenterproto.CreateUserRequest) (*usercenterproto.CreateUserReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *usercenterproto.CreateUserReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.CreateUserRequest) (*usercenterproto.CreateUserReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.CreateUserRequest) *usercenterproto.CreateUserReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usercenterproto.CreateUserReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *usercenterproto.CreateUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserCenterServer_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserCenterServer_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *usercenterproto.CreateUserRequest
func (_e *MockUserCenterServer_Expecter) CreateUser(_a0 interface{}, _a1 interface{}) *MockUserCenterServer_CreateUser_Call {
	return &MockUserCenterServer_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0, _a1)}
}

func (_c *MockUserCenterServer_CreateUser_Call) Run(run func(_a0 context.Context, _a1 *usercenterproto.CreateUserRequest)) *MockUserCenterServer_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*usercenterproto.CreateUserRequest))
	})
	return _c
}

func (_c *MockUserCenterServer_CreateUser_Call) Return(_a0 *usercenterproto.CreateUserReply, _a1 error) *MockUserCenterServer_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserCenterServer_CreateUser_Call) RunAndReturn(run func(context.Context, *usercenterproto.CreateUserRequest) (*usercenterproto.CreateUserReply, error)) *MockUserCenterServer_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUID provides a mock function with given fields: _a0, _a1
func (_m *MockUserCenterServer) GetUserByUID(_a0 context.Context, _a1 *usercenterproto.GetUserByUIDRequest) (*usercenterproto.GetUserByUIDReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUID")
	}

	var r0 *usercenterproto.GetUserByUIDReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.GetUserByUIDRequest) (*usercenterproto.GetUserByUIDReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.GetUserByUIDRequest) *usercenterproto.GetUserByUIDReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usercenterproto.GetUserByUIDReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *usercenterproto.GetUserByUIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserCenterServer_GetUserByUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUID'
type MockUserCenterServer_GetUserByUID_Call struct {
	*mock.Call
}

// GetUserByUID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *usercenterproto.GetUserByUIDRequest
func (_e *MockUserCenterServer_Expecter) GetUserByUID(_a0 interface{}, _a1 interface{}) *MockUserCenterServer_GetUserByUID_Call {
	return &MockUserCenterServer_GetUserByUID_Call{Call: _e.mock.On("GetUserByUID", _a0, _a1)}
}

func (_c *MockUserCenterServer_GetUserByUID_Call) Run(run func(_a0 context.Context, _a1 *usercenterproto.GetUserByUIDRequest)) *MockUserCenterServer_GetUserByUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*usercenterproto.GetUserByUIDRequest))
	})
	return _c
}

func (_c *MockUserCenterServer_GetUserByUID_Call) Return(_a0 *usercenterproto.GetUserByUIDReply, _a1 error) *MockUserCenterServer_GetUserByUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserCenterServer_GetUserByUID_Call) RunAndReturn(run func(context.Context, *usercenterproto.GetUserByUIDRequest) (*usercenterproto.GetUserByUIDReply, error)) *MockUserCenterServer_GetUserByUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: _a0, _a1
func (_m *MockUserCenterServer) GetUserByUsername(_a0 context.Context, _a1 *usercenterproto.GetUserByUsernameRequest) (*usercenterproto.GetUserByUsernameReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *usercenterproto.GetUserByUsernameReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.GetUserByUsernameRequest) (*usercenterproto.GetUserByUsernameReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.GetUserByUsernameRequest) *usercenterproto.GetUserByUsernameReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usercenterproto.GetUserByUsernameReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *usercenterproto.GetUserByUsernameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserCenterServer_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockUserCenterServer_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *usercenterproto.GetUserByUsernameRequest
func (_e *MockUserCenterServer_Expecter) GetUserByUsername(_a0 interface{}, _a1 interface{}) *MockUserCenterServer_GetUserByUsername_Call {
	return &MockUserCenterServer_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", _a0, _a1)}
}

func (_c *MockUserCenterServer_GetUserByUsername_Call) Run(run func(_a0 context.Context, _a1 *usercenterproto.GetUserByUsernameRequest)) *MockUserCenterServer_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*usercenterproto.GetUserByUsernameRequest))
	})
	return _c
}

func (_c *MockUserCenterServer_GetUserByUsername_Call) Return(_a0 *usercenterproto.GetUserByUsernameReply, _a1 error) *MockUserCenterServer_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserCenterServer_GetUserByUsername_Call) RunAndReturn(run func(context.Context, *usercenterproto.GetUserByUsernameRequest) (*usercenterproto.GetUserByUsernameReply, error)) *MockUserCenterServer_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// SearchUser provides a mock function with given fields: _a0, _a1
func (_m *MockUserCenterServer) SearchUser(_a0 context.Context, _a1 *usercenterproto.SearchUserRequest) (*usercenterproto.SearchUserReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SearchUser")
	}

	var r0 *usercenterproto.SearchUserReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.SearchUserRequest) (*usercenterproto.SearchUserReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.SearchUserRequest) *usercenterproto.SearchUserReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usercenterproto.SearchUserReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *usercenterproto.SearchUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserCenterServer_SearchUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchUser'
type MockUserCenterServer_SearchUser_Call struct {
	*mock.Call
}

// SearchUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *usercenterproto.SearchUserRequest
func (_e *MockUserCenterServer_Expecter) SearchUser(_a0 interface{}, _a1 interface{}) *MockUserCenterServer_SearchUser_Call {
	return &MockUserCenterServer_SearchUser_Call{Call: _e.mock.On("SearchUser", _a0, _a1)}
}

func (_c *MockUserCenterServer_SearchUser_Call) Run(run func(_a0 context.Context, _a1 *usercenterproto.SearchUserRequest)) *MockUserCenterServer_SearchUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*usercenterproto.SearchUserRequest))
	})
	return _c
}

func (_c *MockUserCenterServer_SearchUser_Call) Return(_a0 *usercenterproto.SearchUserReply, _a1 error) *MockUserCenterServer_SearchUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserCenterServer_SearchUser_Call) RunAndReturn(run func(context.Context, *usercenterproto.SearchUserRequest) (*usercenterproto.SearchUserReply, error)) *MockUserCenterServer_SearchUser_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePassword provides a mock function with given fields: _a0, _a1
func (_m *MockUserCenterServer) ValidatePassword(_a0 context.Context, _a1 *usercenterproto.ValidatePasswordRequest) (*usercenterproto.ValidatePasswordReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePassword")
	}

	var r0 *usercenterproto.ValidatePasswordReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.ValidatePasswordRequest) (*usercenterproto.ValidatePasswordReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.ValidatePasswordRequest) *usercenterproto.ValidatePasswordReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usercenterproto.ValidatePasswordReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *usercenterproto.ValidatePasswordRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserCenterServer_ValidatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePassword'
type MockUserCenterServer_ValidatePassword_Call struct {
	*mock.Call
}

// ValidatePassword is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *usercenterproto.ValidatePasswordRequest
func (_e *MockUserCenterServer_Expecter) ValidatePassword(_a0 interface{}, _a1 interface{}) *MockUserCenterServer_ValidatePassword_Call {
	return &MockUserCenterServer_ValidatePassword_Call{Call: _e.mock.On("ValidatePassword", _a0, _a1)}
}

func (_c *MockUserCenterServer_ValidatePassword_Call) Run(run func(_a0 context.Context, _a1 *usercenterproto.ValidatePasswordRequest)) *MockUserCenterServer_ValidatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*usercenterproto.ValidatePasswordRequest))
	})
	return _c
}

func (_c *MockUserCenterServer_ValidatePassword_Call) Return(_a0 *usercenterproto.ValidatePasswordReply, _a1 error) *MockUserCenterServer_ValidatePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserCenterServer_ValidatePassword_Call) RunAndReturn(run func(context.Context, *usercenterproto.ValidatePasswordRequest) (*usercenterproto.ValidatePasswordReply, error)) *MockUserCenterServer_ValidatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedUserCenterServer provides a mock function with given fields:
func (_m *MockUserCenterServer) mustEmbedUnimplementedUserCenterServer() {
	_m.Called()
}

// MockUserCenterServer_mustEmbedUnimplementedUserCenterServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedUserCenterServer'
type MockUserCenterServer_mustEmbedUnimplementedUserCenterServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedUserCenterServer is a helper method to define mock.On call
func (_e *MockUserCenterServer_Expecter) mustEmbedUnimplementedUserCenterServer() *MockUserCenterServer_mustEmbedUnimplementedUserCenterServer_Call {
	return &MockUserCenterServer_mustEmbedUnimplementedUserCenterServer_Call{Call: _e.mock.On("mustEmbedUnimplementedUserCenterServer")}
}

func (_c *MockUserCenterServer_mustEmbedUnimplementedUserCenterServer_Call) Run(run func()) *MockUserCenterServer_mustEmbedUnimplementedUserCenterServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserCenterServer_mustEmbedUnimplementedUserCenterServer_Call) Return() *MockUserCenterServer_mustEmbedUnimplementedUserCenterServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserCenterServer_mustEmbedUnimplementedUserCenterServer_Call) RunAndReturn(run func()) *MockUserCenterServer_mustEmbedUnimplementedUserCenterServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserCenterServer creates a new instance of MockUserCenterServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserCenterServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserCenterServer {
	mock := &MockUserCenterServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
