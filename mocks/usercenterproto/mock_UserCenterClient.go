// Code generated by mockery v2.38.0. DO NOT EDIT.

package mockusercenterproto

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	usercenterproto "github.com/liangjunmo/goproject/api/usercenterproto"
)

// MockUserCenterClient is an autogenerated mock type for the UserCenterClient type
type MockUserCenterClient struct {
	mock.Mock
}

type MockUserCenterClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserCenterClient) EXPECT() *MockUserCenterClient_Expecter {
	return &MockUserCenterClient_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, in, opts
func (_m *MockUserCenterClient) CreateUser(ctx context.Context, in *usercenterproto.CreateUserRequest, opts ...grpc.CallOption) (*usercenterproto.CreateUserReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *usercenterproto.CreateUserReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.CreateUserRequest, ...grpc.CallOption) (*usercenterproto.CreateUserReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.CreateUserRequest, ...grpc.CallOption) *usercenterproto.CreateUserReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usercenterproto.CreateUserReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *usercenterproto.CreateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserCenterClient_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserCenterClient_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *usercenterproto.CreateUserRequest
//   - opts ...grpc.CallOption
func (_e *MockUserCenterClient_Expecter) CreateUser(ctx interface{}, in interface{}, opts ...interface{}) *MockUserCenterClient_CreateUser_Call {
	return &MockUserCenterClient_CreateUser_Call{Call: _e.mock.On("CreateUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserCenterClient_CreateUser_Call) Run(run func(ctx context.Context, in *usercenterproto.CreateUserRequest, opts ...grpc.CallOption)) *MockUserCenterClient_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*usercenterproto.CreateUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserCenterClient_CreateUser_Call) Return(_a0 *usercenterproto.CreateUserReply, _a1 error) *MockUserCenterClient_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserCenterClient_CreateUser_Call) RunAndReturn(run func(context.Context, *usercenterproto.CreateUserRequest, ...grpc.CallOption) (*usercenterproto.CreateUserReply, error)) *MockUserCenterClient_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUID provides a mock function with given fields: ctx, in, opts
func (_m *MockUserCenterClient) GetUserByUID(ctx context.Context, in *usercenterproto.GetUserByUIDRequest, opts ...grpc.CallOption) (*usercenterproto.GetUserByUIDReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUID")
	}

	var r0 *usercenterproto.GetUserByUIDReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.GetUserByUIDRequest, ...grpc.CallOption) (*usercenterproto.GetUserByUIDReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.GetUserByUIDRequest, ...grpc.CallOption) *usercenterproto.GetUserByUIDReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usercenterproto.GetUserByUIDReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *usercenterproto.GetUserByUIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserCenterClient_GetUserByUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUID'
type MockUserCenterClient_GetUserByUID_Call struct {
	*mock.Call
}

// GetUserByUID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *usercenterproto.GetUserByUIDRequest
//   - opts ...grpc.CallOption
func (_e *MockUserCenterClient_Expecter) GetUserByUID(ctx interface{}, in interface{}, opts ...interface{}) *MockUserCenterClient_GetUserByUID_Call {
	return &MockUserCenterClient_GetUserByUID_Call{Call: _e.mock.On("GetUserByUID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserCenterClient_GetUserByUID_Call) Run(run func(ctx context.Context, in *usercenterproto.GetUserByUIDRequest, opts ...grpc.CallOption)) *MockUserCenterClient_GetUserByUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*usercenterproto.GetUserByUIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserCenterClient_GetUserByUID_Call) Return(_a0 *usercenterproto.GetUserByUIDReply, _a1 error) *MockUserCenterClient_GetUserByUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserCenterClient_GetUserByUID_Call) RunAndReturn(run func(context.Context, *usercenterproto.GetUserByUIDRequest, ...grpc.CallOption) (*usercenterproto.GetUserByUIDReply, error)) *MockUserCenterClient_GetUserByUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, in, opts
func (_m *MockUserCenterClient) GetUserByUsername(ctx context.Context, in *usercenterproto.GetUserByUsernameRequest, opts ...grpc.CallOption) (*usercenterproto.GetUserByUsernameReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *usercenterproto.GetUserByUsernameReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.GetUserByUsernameRequest, ...grpc.CallOption) (*usercenterproto.GetUserByUsernameReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.GetUserByUsernameRequest, ...grpc.CallOption) *usercenterproto.GetUserByUsernameReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usercenterproto.GetUserByUsernameReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *usercenterproto.GetUserByUsernameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserCenterClient_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockUserCenterClient_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - in *usercenterproto.GetUserByUsernameRequest
//   - opts ...grpc.CallOption
func (_e *MockUserCenterClient_Expecter) GetUserByUsername(ctx interface{}, in interface{}, opts ...interface{}) *MockUserCenterClient_GetUserByUsername_Call {
	return &MockUserCenterClient_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserCenterClient_GetUserByUsername_Call) Run(run func(ctx context.Context, in *usercenterproto.GetUserByUsernameRequest, opts ...grpc.CallOption)) *MockUserCenterClient_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*usercenterproto.GetUserByUsernameRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserCenterClient_GetUserByUsername_Call) Return(_a0 *usercenterproto.GetUserByUsernameReply, _a1 error) *MockUserCenterClient_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserCenterClient_GetUserByUsername_Call) RunAndReturn(run func(context.Context, *usercenterproto.GetUserByUsernameRequest, ...grpc.CallOption) (*usercenterproto.GetUserByUsernameReply, error)) *MockUserCenterClient_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// SearchUser provides a mock function with given fields: ctx, in, opts
func (_m *MockUserCenterClient) SearchUser(ctx context.Context, in *usercenterproto.SearchUserRequest, opts ...grpc.CallOption) (*usercenterproto.SearchUserReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchUser")
	}

	var r0 *usercenterproto.SearchUserReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.SearchUserRequest, ...grpc.CallOption) (*usercenterproto.SearchUserReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.SearchUserRequest, ...grpc.CallOption) *usercenterproto.SearchUserReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usercenterproto.SearchUserReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *usercenterproto.SearchUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserCenterClient_SearchUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchUser'
type MockUserCenterClient_SearchUser_Call struct {
	*mock.Call
}

// SearchUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *usercenterproto.SearchUserRequest
//   - opts ...grpc.CallOption
func (_e *MockUserCenterClient_Expecter) SearchUser(ctx interface{}, in interface{}, opts ...interface{}) *MockUserCenterClient_SearchUser_Call {
	return &MockUserCenterClient_SearchUser_Call{Call: _e.mock.On("SearchUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserCenterClient_SearchUser_Call) Run(run func(ctx context.Context, in *usercenterproto.SearchUserRequest, opts ...grpc.CallOption)) *MockUserCenterClient_SearchUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*usercenterproto.SearchUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserCenterClient_SearchUser_Call) Return(_a0 *usercenterproto.SearchUserReply, _a1 error) *MockUserCenterClient_SearchUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserCenterClient_SearchUser_Call) RunAndReturn(run func(context.Context, *usercenterproto.SearchUserRequest, ...grpc.CallOption) (*usercenterproto.SearchUserReply, error)) *MockUserCenterClient_SearchUser_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePassword provides a mock function with given fields: ctx, in, opts
func (_m *MockUserCenterClient) ValidatePassword(ctx context.Context, in *usercenterproto.ValidatePasswordRequest, opts ...grpc.CallOption) (*usercenterproto.ValidatePasswordReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePassword")
	}

	var r0 *usercenterproto.ValidatePasswordReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.ValidatePasswordRequest, ...grpc.CallOption) (*usercenterproto.ValidatePasswordReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *usercenterproto.ValidatePasswordRequest, ...grpc.CallOption) *usercenterproto.ValidatePasswordReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usercenterproto.ValidatePasswordReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *usercenterproto.ValidatePasswordRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserCenterClient_ValidatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePassword'
type MockUserCenterClient_ValidatePassword_Call struct {
	*mock.Call
}

// ValidatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - in *usercenterproto.ValidatePasswordRequest
//   - opts ...grpc.CallOption
func (_e *MockUserCenterClient_Expecter) ValidatePassword(ctx interface{}, in interface{}, opts ...interface{}) *MockUserCenterClient_ValidatePassword_Call {
	return &MockUserCenterClient_ValidatePassword_Call{Call: _e.mock.On("ValidatePassword",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserCenterClient_ValidatePassword_Call) Run(run func(ctx context.Context, in *usercenterproto.ValidatePasswordRequest, opts ...grpc.CallOption)) *MockUserCenterClient_ValidatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*usercenterproto.ValidatePasswordRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserCenterClient_ValidatePassword_Call) Return(_a0 *usercenterproto.ValidatePasswordReply, _a1 error) *MockUserCenterClient_ValidatePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserCenterClient_ValidatePassword_Call) RunAndReturn(run func(context.Context, *usercenterproto.ValidatePasswordRequest, ...grpc.CallOption) (*usercenterproto.ValidatePasswordReply, error)) *MockUserCenterClient_ValidatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserCenterClient creates a new instance of MockUserCenterClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserCenterClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserCenterClient {
	mock := &MockUserCenterClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
