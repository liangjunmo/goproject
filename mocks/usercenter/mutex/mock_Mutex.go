// Code generated by mockery v2.38.0. DO NOT EDIT.

package mockmutex

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockMutex is an autogenerated mock type for the Mutex type
type MockMutex struct {
	mock.Mock
}

type MockMutex_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMutex) EXPECT() *MockMutex_Expecter {
	return &MockMutex_Expecter{mock: &_m.Mock}
}

// Lock provides a mock function with given fields: ctx
func (_m *MockMutex) Lock(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Lock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMutex_Lock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lock'
type MockMutex_Lock_Call struct {
	*mock.Call
}

// Lock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMutex_Expecter) Lock(ctx interface{}) *MockMutex_Lock_Call {
	return &MockMutex_Lock_Call{Call: _e.mock.On("Lock", ctx)}
}

func (_c *MockMutex_Lock_Call) Run(run func(ctx context.Context)) *MockMutex_Lock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMutex_Lock_Call) Return(_a0 error) *MockMutex_Lock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMutex_Lock_Call) RunAndReturn(run func(context.Context) error) *MockMutex_Lock_Call {
	_c.Call.Return(run)
	return _c
}

// Unlock provides a mock function with given fields: ctx
func (_m *MockMutex) Unlock(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Unlock")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMutex_Unlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unlock'
type MockMutex_Unlock_Call struct {
	*mock.Call
}

// Unlock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMutex_Expecter) Unlock(ctx interface{}) *MockMutex_Unlock_Call {
	return &MockMutex_Unlock_Call{Call: _e.mock.On("Unlock", ctx)}
}

func (_c *MockMutex_Unlock_Call) Run(run func(ctx context.Context)) *MockMutex_Unlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMutex_Unlock_Call) Return(ok bool, err error) *MockMutex_Unlock_Call {
	_c.Call.Return(ok, err)
	return _c
}

func (_c *MockMutex_Unlock_Call) RunAndReturn(run func(context.Context) (bool, error)) *MockMutex_Unlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMutex creates a new instance of MockMutex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMutex(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMutex {
	mock := &MockMutex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
